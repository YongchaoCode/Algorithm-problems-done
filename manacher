//manacher算法：（还有一个二分+哈希算法，后面学习下）
/*#include<bits/stdc++.h>
using namespace std;
const int N=31000005;
int d[N];//盒子
char a[N];
char s1[N];
int manacher(char s[]){//n:新串的长度
    int Max=0;
    d[1]=1;
    int l,r=1;//盒子边界
    int n=strlen(s+1);
    for(int i=2;i<=n;i++){
        if(i<r){//i在盒子内
            d[i]=min(d[r-i+l],r-i+1);//为什么是min:当i刚好在最右边界时,d[i]不能直接等于左对称d[r-i+1],
        }                      // 而是r-i+1（1）,后面的while也会再更新d[i]
        else {
            d[i]=1;
        }
        while(s[i-d[i]]==s[i+d[i]]){
            d[i]++;
        }
        if(i+d[i]-1>r){           //盒子边界更新:始终记住盒子带来的意义：能为后面的i的d[i]直接等于在盒子范围内的对称d[r-i+1]
            l=i-d[i]+1,r=i+d[i]-1;            //d[i]含义：以i为中心的右半径值（包括自身）
        }
        Max=max(Max,d[i]);
    }
    return Max;
}
int main() {
    cin >> (a+1);
    int n=strlen(a+1);
    int k = 0;
    s1[0] = '$';
    s1[++k] = '#';
    for (int i = 1; i <= n; i++) {//s1：新串
        s1[++k] = a[i], s1[++k] = '#';
    }
    cout<<manacher(s1)-1<<endl;
    return 0;
}*/


//改进的manacher，上一个不知道为什么总是RE，TLE
#include<bits/stdc++.h>
using namespace std;
const int N=21000009;
char a[N];
char s[N];
int d[N];

int get_new(){
    int len=strlen(a);
     s[0]='$';
     s[1]='#';
     int k=1;
      for(int i=0;i<len;i++){
          s[++k]=a[i],s[++k]='#';
      }
    s[++k]='\0';//130行，为满足循环次数，走完s串。不使用strlen,优化
      return k;
}

int manacher(){
   int id=1,mx=1,Max=0,len=get_new();
    for(int i=1;i<len;i++){
        if(i<mx){
            d[i]=min(d[2*id-i],mx-i);
        }
        else{
            d[i]=1;
        }
         while(s[i+d[i]]==s[i-d[i]]){
             d[i]++;
         }
          if(i+d[i]>mx){
              mx=i+d[i];
              id=i;//当i是边界，能把边界mx拉得更远，那么就是以i为中心的id的回文串，
                     // 在后面中，也是在以i为中心的回文串的，使用到p[]盒子
          }
          Max=max(Max,d[i]);
    }
    return Max-1;
}

int main()
{
    int n;
     cin>>n;
      while(n--){
          memset(a,0,sizeof(a));
          cin>>a;
          cout<<manacher()<<endl;
      }
    return 0;
}


